
float cubic_in_out(float t) {
    t = 1.0 - t;
    t = 1.0 - t*t;
    return t*t;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    float height = cubic_in_out(clamp((uv.y - 0.1) * 3.0, 0.0, 1.0));

    vec3 col = mix(
        vec3(0.6, 0.6, 1.0),
        vec3(0.6, 0.53, 0.85),
        height
    ) + vec3(
        pow(1.0 - uv.y, 8.0) * 0.2,
        pow(1.0 - uv.y, 16.0) * 0.2,
        0.0
    );

    // Output to screen
    fragColor = vec4(col,1.0);
}



float cubic_in_out(float t) {
    t = 1.0 - t;
    t = 1.0 - t*t;
    return t*t;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    //float height = cubic_in_out(clamp((uv.y - 0.1) * 3.0, 0.0, 1.0));
    float height = uv.y;

    vec3 col0 = mix(
        vec3(0.3, 0.0, 1.0),
        vec3(1.0, 0.6, 0.0),
        height
    );
    vec3 col1 = mix(
        col0,
        vec3(0.5),
        cubic_in_out(abs(height-0.5)*2.0) * 0.9
    );

    // Output to screen
    fragColor = vec4(col1,1.0);
}




float cubic_in_out(float t) {
    t = 1.0 - t;
    t = 1.0 - t*t;
    return t*t;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    //float height = cubic_in_out(clamp((uv.y - 0.1) * 3.0, 0.0, 1.0));
    float height = uv.y;

    vec3 col0 = mix(
        vec3(0.3, 0.0, 1.0),
        //vec3(1.0, 0.6, 0.0),
        vec3(0.6, 0.55, 0.3),
        height
    );
    vec3 col1 = mix(
        vec3(0.5),
        col0,
        cubic_in_out(abs(height-0.5)*2.0)
    ) * height + vec3(height/2.0);

    // Output to screen
    fragColor = vec4(col1,1.0);
}



float cubic_in_out(float t) {
    t = 1.0 - t;
    t = 1.0 - t*t;
    return t*t;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    //float height = cubic_in_out(clamp((uv.y - 0.1) * 3.0, 0.0, 1.0));
    float height = uv.y;

    vec3 col0 = mix(
        vec3(1.0, 1.0, 1.0),
        //vec3(1.0, 0.6, 0.0),
        vec3(1.0, 1.0, 0.7),
        1.0-height
    );
    vec3 col1 = mix(
        vec3(1.0, 0.8, 0.7),
        col0,
        1.0-pow(1.0-height, 4.0)
    );

    // Output to screen
    fragColor = vec4(col1,1.0);
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    //float height = cubic_in_out(clamp((uv.y - 0.1) * 3.0, 0.0, 1.0));
    float height = 1.0-uv.y;
    
    height *= height;
    height *= height;
    vec3 col0 = mix(
        vec3(1.0, 1.0, 1.0),
        //vec3(1.0, 0.8, 0.0),
        vec3(1.0, 1.0, 0.0),
        height
    );
    height *= height;
    vec3 col1 = mix(
        col0,
        vec3(1.0, 0.5, 0.2),
        height
    );

    // Output to screen
    fragColor = vec4(col1,1.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    //float height = cubic_in_out(clamp((uv.y - 0.1) * 3.0, 0.0, 1.0));
    float height = 1.0-uv.y;
    
    height *= height;
    height *= height;
    vec3 col0 = mix(
        vec3(0.0, 0.0, 0.0),
        //vec3(1.0, 0.8, 0.0),
        vec3(0.2, 0.04, 0.3),
        height
    );
    height *= height;
    vec3 col1 = mix(
        col0,
        vec3(1.0, 0.5, 0.2),
        height
    );

    // Output to screen
    fragColor = vec4(col1,1.0);
}



void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    //float height = cubic_in_out(clamp((uv.y - 0.1) * 3.0, 0.0, 1.0));
    float height = 1.0-uv.y;
    
    height *= height;
    vec3 col0 = mix(
        vec3(0.0, 0.0, 0.0),
        //vec3(1.0, 0.8, 0.0),
        vec3(0.2, 0.04, 0.3),
        height
    );
    height *= height;
    vec3 col1 = mix(
        col0,
        vec3(0.31, 0.23, 0.4),
        height
    );

    // Output to screen
    fragColor = vec4(col1,1.0);
}



void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    vec2 iuv = vec2(1.0) - uv;

    vec3 red = mix(
        vec3(1.0, 0.2, 0.0),
        vec3(0.9, 0.0, 0.8),
        iuv.y*iuv.y
    ) * uv.y;
    //vec3 green = mix(
    //    vec3(0.0, 0.8, 0.4),
    //    vec3(0.0, 0.1, 0.9),
    //    iuv.y*iuv.y
    //) * uv.y;
    vec3 green = mix(
        vec3(0.4, 0.9, 0.6),
        vec3(0.1, 0.2, 0.6),
        iuv.y*iuv.y
    ) * uv.y;
    vec3 blue = mix(
        vec3(0.5, 0.3, 0.9),
        vec3(0.6, 0.3, 0.9),
        iuv.y*iuv.y
    ) * uv.y;


    // Output to screen
    fragColor.a = 1.0;

    switch(int(floor((uv.x*4.0)))) {
        case 0:
        //fragColor.rgb = vec3(uv.y);
        //fragColor.rgb = vec3(0.0, 0.0, uv.y);
        fragColor.rgb = (red + green + blue)*0.8;

        break;
        //#a100ff
        case 1:
        fragColor.rgb = red;
        break;
        
        case 2:
        fragColor.rgb = green;
        break;
        
        case 3:
        fragColor.rgb = blue;
        break;
    }
    //fragColor.r = floor(uv.x*4.0) /4.0;
}